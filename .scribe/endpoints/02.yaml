name: Users
description: |-

  APIs for managing users
endpoints:
  -
    httpMethods:
      - GET
    uri: api/users
    metadata:
      groupName: Users
      groupDescription: |-

        APIs for managing users
      subgroup: ''
      subgroupDescription: ''
      title: 'Get Users'
      description: 'This endpoint allows you to get all users.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          [
          {
          "id": 1,
          "name": "Admin",
          "email": "admin@admin.com",
          "products": [
          {
          "id": 1,
          "productName": "Shirt",
          "productPrice": "$600",
          "discountedPrice": "$540",
          "discount": "$60"
          },
          {
          "id": 3,
          "productName": "Bed",
          "productPrice": "$6000",
          "discountedPrice": "$5400",
          "discount": "$600"
          }
          ]
          },
          {
          "id": 3,
          "name": "User",
          "email": "user@user.com",
          "products": []
          }
          ]
        headers: []
        description: 'Get Users'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 3hVkP168ZdafgcaE6ev4b5D'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/users
    metadata:
      groupName: Users
      groupDescription: |-

        APIs for managing users
      subgroup: ''
      subgroupDescription: ''
      title: 'Add User'
      description: 'This endpoint allows you to add a user.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'The name of the user.'
        required: true
        example: User
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      email:
        name: email
        description: 'The email of the user.'
        required: true
        example: user@user.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      password:
        name: password
        description: 'The password of the user.'
        required: true
        example: test1234
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanBodyParameters:
      name: User
      email: user@user.com
      password: test1234
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
          "id": 3,
          "name": "User",
          "email": "user@user.com",
          "products": []
          }
        headers: []
        description: 'Add a User'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 46E1fZhv5c36D8VabdkePga'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/users/{id}'
    metadata:
      groupName: Users
      groupDescription: |-

        APIs for managing users
      subgroup: ''
      subgroupDescription: ''
      title: 'Get User'
      description: 'This endpoint allows you to get a user.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: 3
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanUrlParameters:
      id: 3
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "id": 3,
          "name": "User",
          "email": "user@user.com",
          "products": []
          }
        headers: []
        description: 'Add a User'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer ad5v6haZ46DPE1cg3kV8bef'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
      - PATCH
    uri: 'api/users/{id}'
    metadata:
      groupName: Users
      groupDescription: |-

        APIs for managing users
      subgroup: ''
      subgroupDescription: ''
      title: 'Update User'
      description: 'This endpoint allows you to update a user.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: 3
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanUrlParameters:
      id: 3
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'The name of the user.'
        required: true
        example: UpdatedUser
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      email:
        name: email
        description: 'The email of the user.'
        required: true
        example: user@updated.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      password:
        name: password
        description: 'The password of the user.'
        required: true
        example: test123456
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanBodyParameters:
      name: UpdatedUser
      email: user@updated.com
      password: test123456
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "id": 3,
          "name": "UpdatedUser",
          "email": "user@updated.com",
          "products":[]

          }
        headers: []
        description: 'Update a User'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer vZg6a3k8dc56VhDa4Pb1feE'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/users/{id}'
    metadata:
      groupName: Users
      groupDescription: |-

        APIs for managing users
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete User'
      description: 'This endpoint allows you to delete a user.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: 3
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanUrlParameters:
      id: 3
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 204
        content: ''
        headers: []
        description: 'Delete a User'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 64kg6E83hV15cPvadbfaDZe'
    controller: null
    method: null
    route: null
    custom: []
